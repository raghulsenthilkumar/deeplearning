from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255
                                   #horizontal_flip=True, vertical_flip=True, 
                                   #rotation_range=15,shear_range=15,
                                   #zoom_range=0.15
                                   )

test_datagen = ImageDataGenerator(rescale=1./255)

validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        "output/train",
        target_size=(300, 200),
        batch_size=64,
        class_mode='categorical'
        )
 
validation_generator = validation_datagen.flow_from_directory(
        'output/val',
        target_size=(300, 200),
        batch_size=64,
        class_mode='categorical',
        shuffle=False)

test_generator = test_datagen.flow_from_directory(
        'output/test',
        target_size=(300, 200),
        batch_size=64,
        class_mode='categorical',
        shuffle=False)
model = models.Sequential()

# Add new layers
model.add(layers.GlobalAveragePooling2D())
model.add(layers.Dense(1024))
model.add(layers.BatchNormalization())
model.add(layers.Activation('relu'))
model.add(layers.Dense(512))
model.add(layers.BatchNormalization())
model.add(layers.Activation('relu'))

model.add(layers.Dense(3, activation='softmax'))
 
# Show a summary of the model. Check the number of trainable parameters
model.summary()
# Add the resnet convolutional base model
model.add(resnet)
from keras.callbacks import ModelCheckpoint
filepath='finetuning_best_weights.hdf5'
checkpointer=ModelCheckpoint(filepath,monitor='val_acc',mode='max',save_best_only=True,verbose=1)
epochs = 10
new_history=new_model.fit_generator(
        train_generator,
        steps_per_epoch=train_generator.samples // train_generator.batch_size,
        epochs=epochs,
        callbacks=[checkpointer],
        validation_data=validation_generator,
        validation_steps=validation_generator.samples//validation_generator.batch_size,
        verbose=1)
new_model.load_weights(filepath)
test_output= new_model.evaluate_generator(test_generator, steps=test_generator.samples/test_generator.batch_size, verbose=1)
print(test_output)
print(new_model.metrics_names)

